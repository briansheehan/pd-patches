#N canvas 827 239 527 327 12;
#X obj 994 194 cnv 15 402 649 empty empty empty 20 12 0 14 #b7b7b7 #373737 0;
#X obj 552 689 cnv 15 299 139 empty empty empty 20 12 0 14 #b7b7b7 #373737 0;
#X obj 12 550 cnv 15 437 280 empty empty empty 20 12 0 14 #58b775 #373737 0;
#X obj 12 397 cnv 15 194 133 empty empty empty 20 12 0 14 #b7b7b7 #373737 0;
#X obj 12 260 cnv 15 194 125 empty empty empty 20 12 0 14 #b7b7b7 #373737 0;
#X obj 221 260 cnv 15 228 270 empty empty empty 20 12 0 14 #b683b7 #373737 0;
#X obj 682 779 dac~;
#X obj 20 331 osc~;
#X floatatom 20 300 5 0 0 0 - - - 16;
#X obj 682 741 *~;
#X obj 30 204 notein;
#X obj 30 235 mtof;
#X obj 20 419 *~, f 5;
#X floatatom 239 386 5 0 0 0 - - - 12;
#X floatatom 250 300 5 0 0 0 - - - 12;
#X text 283 385 <-- Modulating frequency, f 23;
#X text 265 269 THE MODULATOR;
#X text 54 269 THE CARRIER;
#X obj 239 331 *;
#X obj 230 300 bng 12 250 50 0 empty empty empty 17 7 0 10 #e4e4e4 #4d4d4d #373737;
#X obj 89 357 send~ car;
#X obj 289 447 send~ mod;
#X obj 1023 276 receive~ car;
#X obj 1023 409 receive~ mod;
#X obj 1023 545 receive~ AM;
#X text 64 418 THE MODULATION, f 17;
#X obj 20 502 send~ AM, f 10;
#X obj 12 12 cnv 15 437 119 empty empty empty 20 12 0 14 #b7b7b7 #373737 0;
#X text 27 18 Amplitude Modulation (AM) Synthesis, f 33;
#X text 24 47 When the amplitude of an oscilator with frequency C (the carrier) is modulated by the amplitude of another oscillator with frequency M (the modulator) \, the resulting signal will contain two frequencies:, f 58;
#X text 157 98 C - M \, and C + M;
#X obj 44 608 receive~ car;
#X obj 298 608 receive~ AM;
#X obj 129 698 +~;
#X obj 239 412 osc~;
#X obj 129 765 send~ car+AM;
#X obj 557 710 receive~ car+AM;
#X obj 298 678 *~;
#X obj 564 385 bs-adsr;
#X text 479 284 This abstraction uses an adsr~ object to shape a note. ADSR stands for Attack \, Decay \, Sustain \, Release. It is a way of controlling the start (attack & decay) middle (sustain) and end (release) of a note., f 60;
#X obj 502 12 bs-keyboard;
#X text 13 143 Right click on the abstractions to open them: [bs-adsr] \, [bs-keyboard] \, [detect-frequencies], f 62;
#X obj 1023 680 receive~ car+AM, f 16;
#X obj 151 608 hsl 128 17 0 1 0 0 empty empty empty -2 -8 0 10 #e4e4e4 #4d4d4d #373737 0 1;
#X obj 44 564 loadmess 0.5, f 12;
#X obj 44 678 *~;
#X obj 68 646 expr 1 - \$1;
#X text 132 578 Mix Carrier with Modulation;
#X text 41 445 The signals are multiplied to produce new signal with two frequencies, f 23;
#X text 730 726 Apply envelope to synthesised signal to create a musical note, f 15;
#X text 1023 215 The [detect-frequencies] abstractions below show what frequencies are present in the various signals used to create the synthesized sound, f 49;
#X obj 129 735 /~ 2;
#X text 289 299 <-- Multiplier (set to some non-zero number to modulate the carrier signal), f 19;
#X text 242 764 <-- This is the signal we have synthesized and want to make music with, f 28;
#X obj 1023 311 bs-detect-frequencies;
#X obj 1023 444 bs-detect-frequencies;
#X obj 1023 580 bs-detect-frequencies;
#X obj 1023 720 bs-detect-frequencies;
#X connect 7 0 12 0;
#X connect 7 0 20 0;
#X connect 8 0 7 0;
#X connect 8 0 18 0;
#X connect 9 0 6 0;
#X connect 9 0 6 1;
#X connect 10 0 11 0;
#X connect 10 1 38 0 48.................G....jY...vA....YF...PI....BB...TB...ff...fn....;
#X connect 11 0 8 0;
#X connect 12 0 26 0;
#X connect 13 0 34 0;
#X connect 14 0 18 1;
#X connect 14 0 19 0;
#X connect 18 0 13 0;
#X connect 19 0 18 0;
#X connect 22 0 54 0;
#X connect 23 0 55 0;
#X connect 24 0 56 0;
#X connect 31 0 45 0;
#X connect 32 0 37 0;
#X connect 33 0 51 0;
#X connect 34 0 12 1;
#X connect 34 0 21 0;
#X connect 36 0 9 0;
#X connect 37 0 33 1;
#X connect 38 0 9 1;
#X connect 42 0 57 0;
#X connect 43 0 37 1;
#X connect 43 0 46 0;
#X connect 44 0 43 0;
#X connect 45 0 33 0;
#X connect 46 0 45 1;
#X connect 51 0 35 0;
